# source: http://localhost:4466
# timestamp: Tue Jan 28 2020 14:51:25 GMT-0500 (Eastern Standard Time)

type AggregateCost {
  count: Int!
}

type AggregateCostCategory {
  count: Int!
}

type AggregateFinancialMonth {
  count: Int!
}

type AggregateMonthlyIncome {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum CategoryType {
  FIXED
  FLEX
  ROLLING
}

type Cost implements Node {
  id: ID!
  amount: Float!
  description: String!
  createdAt: DateTime!
  category: CostCategory!
}

type CostCategory implements Node {
  id: ID!
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  createdAt: DateTime!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost!]
}

"""A connection to a list of items."""
type CostCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CostCategoryEdge]!
  aggregate: AggregateCostCategory!
}

input CostCategoryCreateInput {
  id: ID
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  costs: CostCreateManyWithoutCategoryInput
}

input CostCategoryCreateOneWithoutCostsInput {
  create: CostCategoryCreateWithoutCostsInput
  connect: CostCategoryWhereUniqueInput
}

input CostCategoryCreateWithoutCostsInput {
  id: ID
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
}

"""An edge in a connection."""
type CostCategoryEdge {
  """The item at the end of the edge."""
  node: CostCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CostCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  monthlyLimit_ASC
  monthlyLimit_DESC
  type_ASC
  type_DESC
  totalLimit_ASC
  totalLimit_DESC
  createdAt_ASC
  createdAt_DESC
}

type CostCategoryPreviousValues {
  id: ID!
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  createdAt: DateTime!
}

type CostCategorySubscriptionPayload {
  mutation: MutationType!
  node: CostCategory
  updatedFields: [String!]
  previousValues: CostCategoryPreviousValues
}

input CostCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CostCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostCategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CostCategoryWhereInput
}

input CostCategoryUpdateInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
  costs: CostUpdateManyWithoutCategoryInput
}

input CostCategoryUpdateManyMutationInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
}

input CostCategoryUpdateOneRequiredWithoutCostsInput {
  create: CostCategoryCreateWithoutCostsInput
  connect: CostCategoryWhereUniqueInput
  update: CostCategoryUpdateWithoutCostsDataInput
  upsert: CostCategoryUpsertWithoutCostsInput
}

input CostCategoryUpdateWithoutCostsDataInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
}

input CostCategoryUpsertWithoutCostsInput {
  update: CostCategoryUpdateWithoutCostsDataInput!
  create: CostCategoryCreateWithoutCostsInput!
}

input CostCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CostCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  monthlyLimit: Float

  """All values that are not equal to given value."""
  monthlyLimit_not: Float

  """All values that are contained in given list."""
  monthlyLimit_in: [Float!]

  """All values that are not contained in given list."""
  monthlyLimit_not_in: [Float!]

  """All values less than the given value."""
  monthlyLimit_lt: Float

  """All values less than or equal the given value."""
  monthlyLimit_lte: Float

  """All values greater than the given value."""
  monthlyLimit_gt: Float

  """All values greater than or equal the given value."""
  monthlyLimit_gte: Float
  type: CategoryType

  """All values that are not equal to given value."""
  type_not: CategoryType

  """All values that are contained in given list."""
  type_in: [CategoryType!]

  """All values that are not contained in given list."""
  type_not_in: [CategoryType!]
  totalLimit: Float

  """All values that are not equal to given value."""
  totalLimit_not: Float

  """All values that are contained in given list."""
  totalLimit_in: [Float!]

  """All values that are not contained in given list."""
  totalLimit_not_in: [Float!]

  """All values less than the given value."""
  totalLimit_lt: Float

  """All values less than or equal the given value."""
  totalLimit_lte: Float

  """All values greater than the given value."""
  totalLimit_gt: Float

  """All values greater than or equal the given value."""
  totalLimit_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  costs_every: CostWhereInput
  costs_some: CostWhereInput
  costs_none: CostWhereInput
}

input CostCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type CostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CostEdge]!
  aggregate: AggregateCost!
}

input CostCreateInput {
  id: ID
  amount: Float!
  description: String!
  category: CostCategoryCreateOneWithoutCostsInput!
}

input CostCreateManyWithoutCategoryInput {
  create: [CostCreateWithoutCategoryInput!]
  connect: [CostWhereUniqueInput!]
}

input CostCreateWithoutCategoryInput {
  id: ID
  amount: Float!
  description: String!
}

"""An edge in a connection."""
type CostEdge {
  """The item at the end of the edge."""
  node: Cost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CostOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type CostPreviousValues {
  id: ID!
  amount: Float!
  description: String!
  createdAt: DateTime!
}

input CostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CostSubscriptionPayload {
  mutation: MutationType!
  node: Cost
  updatedFields: [String!]
  previousValues: CostPreviousValues
}

input CostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CostWhereInput
}

input CostUpdateInput {
  amount: Float
  description: String
  category: CostCategoryUpdateOneRequiredWithoutCostsInput
}

input CostUpdateManyDataInput {
  amount: Float
  description: String
}

input CostUpdateManyMutationInput {
  amount: Float
  description: String
}

input CostUpdateManyWithoutCategoryInput {
  create: [CostCreateWithoutCategoryInput!]
  connect: [CostWhereUniqueInput!]
  set: [CostWhereUniqueInput!]
  disconnect: [CostWhereUniqueInput!]
  delete: [CostWhereUniqueInput!]
  update: [CostUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CostUpdateManyWithWhereNestedInput!]
  deleteMany: [CostScalarWhereInput!]
  upsert: [CostUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CostUpdateManyWithWhereNestedInput {
  where: CostScalarWhereInput!
  data: CostUpdateManyDataInput!
}

input CostUpdateWithoutCategoryDataInput {
  amount: Float
  description: String
}

input CostUpdateWithWhereUniqueWithoutCategoryInput {
  where: CostWhereUniqueInput!
  data: CostUpdateWithoutCategoryDataInput!
}

input CostUpsertWithWhereUniqueWithoutCategoryInput {
  where: CostWhereUniqueInput!
  update: CostUpdateWithoutCategoryDataInput!
  create: CostCreateWithoutCategoryInput!
}

input CostWhereInput {
  """Logical AND on all given filters."""
  AND: [CostWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  category: CostCategoryWhereInput
}

input CostWhereUniqueInput {
  id: ID
}

scalar DateTime

type FinancialMonth implements Node {
  id: ID!
  month: Int!
  year: Int!
  income: Float!
  totalCost: Float!
  remainder: Float!
  closed: Boolean!
}

"""A connection to a list of items."""
type FinancialMonthConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialMonthEdge]!
  aggregate: AggregateFinancialMonth!
}

input FinancialMonthCreateInput {
  id: ID
  month: Int!
  year: Int!
  income: Float!
  totalCost: Float!
  remainder: Float!
  closed: Boolean
}

"""An edge in a connection."""
type FinancialMonthEdge {
  """The item at the end of the edge."""
  node: FinancialMonth!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FinancialMonthOrderByInput {
  id_ASC
  id_DESC
  month_ASC
  month_DESC
  year_ASC
  year_DESC
  income_ASC
  income_DESC
  totalCost_ASC
  totalCost_DESC
  remainder_ASC
  remainder_DESC
  closed_ASC
  closed_DESC
}

type FinancialMonthPreviousValues {
  id: ID!
  month: Int!
  year: Int!
  income: Float!
  totalCost: Float!
  remainder: Float!
  closed: Boolean!
}

type FinancialMonthSubscriptionPayload {
  mutation: MutationType!
  node: FinancialMonth
  updatedFields: [String!]
  previousValues: FinancialMonthPreviousValues
}

input FinancialMonthSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FinancialMonthSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinancialMonthSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinancialMonthSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FinancialMonthWhereInput
}

input FinancialMonthUpdateInput {
  month: Int
  year: Int
  income: Float
  totalCost: Float
  remainder: Float
  closed: Boolean
}

input FinancialMonthUpdateManyMutationInput {
  month: Int
  year: Int
  income: Float
  totalCost: Float
  remainder: Float
  closed: Boolean
}

input FinancialMonthWhereInput {
  """Logical AND on all given filters."""
  AND: [FinancialMonthWhereInput!]

  """Logical OR on all given filters."""
  OR: [FinancialMonthWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FinancialMonthWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  month: Int

  """All values that are not equal to given value."""
  month_not: Int

  """All values that are contained in given list."""
  month_in: [Int!]

  """All values that are not contained in given list."""
  month_not_in: [Int!]

  """All values less than the given value."""
  month_lt: Int

  """All values less than or equal the given value."""
  month_lte: Int

  """All values greater than the given value."""
  month_gt: Int

  """All values greater than or equal the given value."""
  month_gte: Int
  year: Int

  """All values that are not equal to given value."""
  year_not: Int

  """All values that are contained in given list."""
  year_in: [Int!]

  """All values that are not contained in given list."""
  year_not_in: [Int!]

  """All values less than the given value."""
  year_lt: Int

  """All values less than or equal the given value."""
  year_lte: Int

  """All values greater than the given value."""
  year_gt: Int

  """All values greater than or equal the given value."""
  year_gte: Int
  income: Float

  """All values that are not equal to given value."""
  income_not: Float

  """All values that are contained in given list."""
  income_in: [Float!]

  """All values that are not contained in given list."""
  income_not_in: [Float!]

  """All values less than the given value."""
  income_lt: Float

  """All values less than or equal the given value."""
  income_lte: Float

  """All values greater than the given value."""
  income_gt: Float

  """All values greater than or equal the given value."""
  income_gte: Float
  totalCost: Float

  """All values that are not equal to given value."""
  totalCost_not: Float

  """All values that are contained in given list."""
  totalCost_in: [Float!]

  """All values that are not contained in given list."""
  totalCost_not_in: [Float!]

  """All values less than the given value."""
  totalCost_lt: Float

  """All values less than or equal the given value."""
  totalCost_lte: Float

  """All values greater than the given value."""
  totalCost_gt: Float

  """All values greater than or equal the given value."""
  totalCost_gte: Float
  remainder: Float

  """All values that are not equal to given value."""
  remainder_not: Float

  """All values that are contained in given list."""
  remainder_in: [Float!]

  """All values that are not contained in given list."""
  remainder_not_in: [Float!]

  """All values less than the given value."""
  remainder_lt: Float

  """All values less than or equal the given value."""
  remainder_lte: Float

  """All values greater than the given value."""
  remainder_gt: Float

  """All values greater than or equal the given value."""
  remainder_gte: Float
  closed: Boolean

  """All values that are not equal to given value."""
  closed_not: Boolean
}

input FinancialMonthWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MonthlyIncome implements Node {
  id: ID!
  amount: Float!
}

"""A connection to a list of items."""
type MonthlyIncomeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MonthlyIncomeEdge]!
  aggregate: AggregateMonthlyIncome!
}

input MonthlyIncomeCreateInput {
  id: ID
  amount: Float!
}

"""An edge in a connection."""
type MonthlyIncomeEdge {
  """The item at the end of the edge."""
  node: MonthlyIncome!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MonthlyIncomeOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type MonthlyIncomePreviousValues {
  id: ID!
  amount: Float!
}

type MonthlyIncomeSubscriptionPayload {
  mutation: MutationType!
  node: MonthlyIncome
  updatedFields: [String!]
  previousValues: MonthlyIncomePreviousValues
}

input MonthlyIncomeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MonthlyIncomeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MonthlyIncomeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MonthlyIncomeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MonthlyIncomeWhereInput
}

input MonthlyIncomeUpdateInput {
  amount: Float
}

input MonthlyIncomeUpdateManyMutationInput {
  amount: Float
}

input MonthlyIncomeWhereInput {
  """Logical AND on all given filters."""
  AND: [MonthlyIncomeWhereInput!]

  """Logical OR on all given filters."""
  OR: [MonthlyIncomeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MonthlyIncomeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
}

input MonthlyIncomeWhereUniqueInput {
  id: ID
}

type Mutation {
  createCostCategory(data: CostCategoryCreateInput!): CostCategory!
  createMonthlyIncome(data: MonthlyIncomeCreateInput!): MonthlyIncome!
  createCost(data: CostCreateInput!): Cost!
  createFinancialMonth(data: FinancialMonthCreateInput!): FinancialMonth!
  updateCostCategory(data: CostCategoryUpdateInput!, where: CostCategoryWhereUniqueInput!): CostCategory
  updateMonthlyIncome(data: MonthlyIncomeUpdateInput!, where: MonthlyIncomeWhereUniqueInput!): MonthlyIncome
  updateCost(data: CostUpdateInput!, where: CostWhereUniqueInput!): Cost
  updateFinancialMonth(data: FinancialMonthUpdateInput!, where: FinancialMonthWhereUniqueInput!): FinancialMonth
  deleteCostCategory(where: CostCategoryWhereUniqueInput!): CostCategory
  deleteMonthlyIncome(where: MonthlyIncomeWhereUniqueInput!): MonthlyIncome
  deleteCost(where: CostWhereUniqueInput!): Cost
  deleteFinancialMonth(where: FinancialMonthWhereUniqueInput!): FinancialMonth
  upsertCostCategory(where: CostCategoryWhereUniqueInput!, create: CostCategoryCreateInput!, update: CostCategoryUpdateInput!): CostCategory!
  upsertMonthlyIncome(where: MonthlyIncomeWhereUniqueInput!, create: MonthlyIncomeCreateInput!, update: MonthlyIncomeUpdateInput!): MonthlyIncome!
  upsertCost(where: CostWhereUniqueInput!, create: CostCreateInput!, update: CostUpdateInput!): Cost!
  upsertFinancialMonth(where: FinancialMonthWhereUniqueInput!, create: FinancialMonthCreateInput!, update: FinancialMonthUpdateInput!): FinancialMonth!
  updateManyCostCategories(data: CostCategoryUpdateManyMutationInput!, where: CostCategoryWhereInput): BatchPayload!
  updateManyMonthlyIncomes(data: MonthlyIncomeUpdateManyMutationInput!, where: MonthlyIncomeWhereInput): BatchPayload!
  updateManyCosts(data: CostUpdateManyMutationInput!, where: CostWhereInput): BatchPayload!
  updateManyFinancialMonths(data: FinancialMonthUpdateManyMutationInput!, where: FinancialMonthWhereInput): BatchPayload!
  deleteManyCostCategories(where: CostCategoryWhereInput): BatchPayload!
  deleteManyMonthlyIncomes(where: MonthlyIncomeWhereInput): BatchPayload!
  deleteManyCosts(where: CostWhereInput): BatchPayload!
  deleteManyFinancialMonths(where: FinancialMonthWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  costCategories(where: CostCategoryWhereInput, orderBy: CostCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CostCategory]!
  monthlyIncomes(where: MonthlyIncomeWhereInput, orderBy: MonthlyIncomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MonthlyIncome]!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost]!
  financialMonths(where: FinancialMonthWhereInput, orderBy: FinancialMonthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FinancialMonth]!
  costCategory(where: CostCategoryWhereUniqueInput!): CostCategory
  monthlyIncome(where: MonthlyIncomeWhereUniqueInput!): MonthlyIncome
  cost(where: CostWhereUniqueInput!): Cost
  financialMonth(where: FinancialMonthWhereUniqueInput!): FinancialMonth
  costCategoriesConnection(where: CostCategoryWhereInput, orderBy: CostCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostCategoryConnection!
  monthlyIncomesConnection(where: MonthlyIncomeWhereInput, orderBy: MonthlyIncomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MonthlyIncomeConnection!
  costsConnection(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostConnection!
  financialMonthsConnection(where: FinancialMonthWhereInput, orderBy: FinancialMonthOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FinancialMonthConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  costCategory(where: CostCategorySubscriptionWhereInput): CostCategorySubscriptionPayload
  monthlyIncome(where: MonthlyIncomeSubscriptionWhereInput): MonthlyIncomeSubscriptionPayload
  cost(where: CostSubscriptionWhereInput): CostSubscriptionPayload
  financialMonth(where: FinancialMonthSubscriptionWhereInput): FinancialMonthSubscriptionPayload
}
