# source: http://localhost:4466
# timestamp: Sat Feb 08 2020 11:54:25 GMT-0500 (Eastern Standard Time)

type AggregateCost {
  count: Int!
}

type AggregateCostCategory {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum CategoryType {
  FIXED
  FLEX
  ROLLING
}

type Cost implements Node {
  id: ID!
  amount: Float!
  description: String!
  createdAt: DateTime!
  category: CostCategory!
  user: User
}

type CostCategory implements Node {
  id: ID!
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  createdAt: DateTime!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost!]
  user: User
}

"""A connection to a list of items."""
type CostCategoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CostCategoryEdge]!
  aggregate: AggregateCostCategory!
}

input CostCategoryCreateInput {
  id: ID
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  costs: CostCreateManyWithoutCategoryInput
  user: UserCreateOneWithoutCategoriesInput
}

input CostCategoryCreateManyWithoutUserInput {
  create: [CostCategoryCreateWithoutUserInput!]
  connect: [CostCategoryWhereUniqueInput!]
}

input CostCategoryCreateOneWithoutCostsInput {
  create: CostCategoryCreateWithoutCostsInput
  connect: CostCategoryWhereUniqueInput
}

input CostCategoryCreateWithoutCostsInput {
  id: ID
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  user: UserCreateOneWithoutCategoriesInput
}

input CostCategoryCreateWithoutUserInput {
  id: ID
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  costs: CostCreateManyWithoutCategoryInput
}

"""An edge in a connection."""
type CostCategoryEdge {
  """The item at the end of the edge."""
  node: CostCategory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CostCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  monthlyLimit_ASC
  monthlyLimit_DESC
  type_ASC
  type_DESC
  totalLimit_ASC
  totalLimit_DESC
  createdAt_ASC
  createdAt_DESC
}

type CostCategoryPreviousValues {
  id: ID!
  name: String!
  monthlyLimit: Float!
  type: CategoryType!
  totalLimit: Float
  createdAt: DateTime!
}

input CostCategoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CostCategoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostCategoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostCategoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  monthlyLimit: Float

  """All values that are not equal to given value."""
  monthlyLimit_not: Float

  """All values that are contained in given list."""
  monthlyLimit_in: [Float!]

  """All values that are not contained in given list."""
  monthlyLimit_not_in: [Float!]

  """All values less than the given value."""
  monthlyLimit_lt: Float

  """All values less than or equal the given value."""
  monthlyLimit_lte: Float

  """All values greater than the given value."""
  monthlyLimit_gt: Float

  """All values greater than or equal the given value."""
  monthlyLimit_gte: Float
  type: CategoryType

  """All values that are not equal to given value."""
  type_not: CategoryType

  """All values that are contained in given list."""
  type_in: [CategoryType!]

  """All values that are not contained in given list."""
  type_not_in: [CategoryType!]
  totalLimit: Float

  """All values that are not equal to given value."""
  totalLimit_not: Float

  """All values that are contained in given list."""
  totalLimit_in: [Float!]

  """All values that are not contained in given list."""
  totalLimit_not_in: [Float!]

  """All values less than the given value."""
  totalLimit_lt: Float

  """All values less than or equal the given value."""
  totalLimit_lte: Float

  """All values greater than the given value."""
  totalLimit_gt: Float

  """All values greater than or equal the given value."""
  totalLimit_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CostCategorySubscriptionPayload {
  mutation: MutationType!
  node: CostCategory
  updatedFields: [String!]
  previousValues: CostCategoryPreviousValues
}

input CostCategorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CostCategorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostCategorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostCategorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CostCategoryWhereInput
}

input CostCategoryUpdateInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
  costs: CostUpdateManyWithoutCategoryInput
  user: UserUpdateOneWithoutCategoriesInput
}

input CostCategoryUpdateManyDataInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
}

input CostCategoryUpdateManyMutationInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
}

input CostCategoryUpdateManyWithoutUserInput {
  create: [CostCategoryCreateWithoutUserInput!]
  connect: [CostCategoryWhereUniqueInput!]
  set: [CostCategoryWhereUniqueInput!]
  disconnect: [CostCategoryWhereUniqueInput!]
  delete: [CostCategoryWhereUniqueInput!]
  update: [CostCategoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CostCategoryUpdateManyWithWhereNestedInput!]
  deleteMany: [CostCategoryScalarWhereInput!]
  upsert: [CostCategoryUpsertWithWhereUniqueWithoutUserInput!]
}

input CostCategoryUpdateManyWithWhereNestedInput {
  where: CostCategoryScalarWhereInput!
  data: CostCategoryUpdateManyDataInput!
}

input CostCategoryUpdateOneRequiredWithoutCostsInput {
  create: CostCategoryCreateWithoutCostsInput
  connect: CostCategoryWhereUniqueInput
  update: CostCategoryUpdateWithoutCostsDataInput
  upsert: CostCategoryUpsertWithoutCostsInput
}

input CostCategoryUpdateWithoutCostsDataInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
  user: UserUpdateOneWithoutCategoriesInput
}

input CostCategoryUpdateWithoutUserDataInput {
  name: String
  monthlyLimit: Float
  type: CategoryType
  totalLimit: Float
  costs: CostUpdateManyWithoutCategoryInput
}

input CostCategoryUpdateWithWhereUniqueWithoutUserInput {
  where: CostCategoryWhereUniqueInput!
  data: CostCategoryUpdateWithoutUserDataInput!
}

input CostCategoryUpsertWithoutCostsInput {
  update: CostCategoryUpdateWithoutCostsDataInput!
  create: CostCategoryCreateWithoutCostsInput!
}

input CostCategoryUpsertWithWhereUniqueWithoutUserInput {
  where: CostCategoryWhereUniqueInput!
  update: CostCategoryUpdateWithoutUserDataInput!
  create: CostCategoryCreateWithoutUserInput!
}

input CostCategoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CostCategoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostCategoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostCategoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  monthlyLimit: Float

  """All values that are not equal to given value."""
  monthlyLimit_not: Float

  """All values that are contained in given list."""
  monthlyLimit_in: [Float!]

  """All values that are not contained in given list."""
  monthlyLimit_not_in: [Float!]

  """All values less than the given value."""
  monthlyLimit_lt: Float

  """All values less than or equal the given value."""
  monthlyLimit_lte: Float

  """All values greater than the given value."""
  monthlyLimit_gt: Float

  """All values greater than or equal the given value."""
  monthlyLimit_gte: Float
  type: CategoryType

  """All values that are not equal to given value."""
  type_not: CategoryType

  """All values that are contained in given list."""
  type_in: [CategoryType!]

  """All values that are not contained in given list."""
  type_not_in: [CategoryType!]
  totalLimit: Float

  """All values that are not equal to given value."""
  totalLimit_not: Float

  """All values that are contained in given list."""
  totalLimit_in: [Float!]

  """All values that are not contained in given list."""
  totalLimit_not_in: [Float!]

  """All values less than the given value."""
  totalLimit_lt: Float

  """All values less than or equal the given value."""
  totalLimit_lte: Float

  """All values greater than the given value."""
  totalLimit_gt: Float

  """All values greater than or equal the given value."""
  totalLimit_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  costs_every: CostWhereInput
  costs_some: CostWhereInput
  costs_none: CostWhereInput
  user: UserWhereInput
}

input CostCategoryWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type CostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CostEdge]!
  aggregate: AggregateCost!
}

input CostCreateInput {
  id: ID
  amount: Float!
  description: String!
  category: CostCategoryCreateOneWithoutCostsInput!
  user: UserCreateOneWithoutCostsInput
}

input CostCreateManyWithoutCategoryInput {
  create: [CostCreateWithoutCategoryInput!]
  connect: [CostWhereUniqueInput!]
}

input CostCreateManyWithoutUserInput {
  create: [CostCreateWithoutUserInput!]
  connect: [CostWhereUniqueInput!]
}

input CostCreateWithoutCategoryInput {
  id: ID
  amount: Float!
  description: String!
  user: UserCreateOneWithoutCostsInput
}

input CostCreateWithoutUserInput {
  id: ID
  amount: Float!
  description: String!
  category: CostCategoryCreateOneWithoutCostsInput!
}

"""An edge in a connection."""
type CostEdge {
  """The item at the end of the edge."""
  node: Cost!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CostOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type CostPreviousValues {
  id: ID!
  amount: Float!
  description: String!
  createdAt: DateTime!
}

input CostScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CostScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type CostSubscriptionPayload {
  mutation: MutationType!
  node: Cost
  updatedFields: [String!]
  previousValues: CostPreviousValues
}

input CostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CostWhereInput
}

input CostUpdateInput {
  amount: Float
  description: String
  category: CostCategoryUpdateOneRequiredWithoutCostsInput
  user: UserUpdateOneWithoutCostsInput
}

input CostUpdateManyDataInput {
  amount: Float
  description: String
}

input CostUpdateManyMutationInput {
  amount: Float
  description: String
}

input CostUpdateManyWithoutCategoryInput {
  create: [CostCreateWithoutCategoryInput!]
  connect: [CostWhereUniqueInput!]
  set: [CostWhereUniqueInput!]
  disconnect: [CostWhereUniqueInput!]
  delete: [CostWhereUniqueInput!]
  update: [CostUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CostUpdateManyWithWhereNestedInput!]
  deleteMany: [CostScalarWhereInput!]
  upsert: [CostUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CostUpdateManyWithoutUserInput {
  create: [CostCreateWithoutUserInput!]
  connect: [CostWhereUniqueInput!]
  set: [CostWhereUniqueInput!]
  disconnect: [CostWhereUniqueInput!]
  delete: [CostWhereUniqueInput!]
  update: [CostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CostUpdateManyWithWhereNestedInput!]
  deleteMany: [CostScalarWhereInput!]
  upsert: [CostUpsertWithWhereUniqueWithoutUserInput!]
}

input CostUpdateManyWithWhereNestedInput {
  where: CostScalarWhereInput!
  data: CostUpdateManyDataInput!
}

input CostUpdateWithoutCategoryDataInput {
  amount: Float
  description: String
  user: UserUpdateOneWithoutCostsInput
}

input CostUpdateWithoutUserDataInput {
  amount: Float
  description: String
  category: CostCategoryUpdateOneRequiredWithoutCostsInput
}

input CostUpdateWithWhereUniqueWithoutCategoryInput {
  where: CostWhereUniqueInput!
  data: CostUpdateWithoutCategoryDataInput!
}

input CostUpdateWithWhereUniqueWithoutUserInput {
  where: CostWhereUniqueInput!
  data: CostUpdateWithoutUserDataInput!
}

input CostUpsertWithWhereUniqueWithoutCategoryInput {
  where: CostWhereUniqueInput!
  update: CostUpdateWithoutCategoryDataInput!
  create: CostCreateWithoutCategoryInput!
}

input CostUpsertWithWhereUniqueWithoutUserInput {
  where: CostWhereUniqueInput!
  update: CostUpdateWithoutUserDataInput!
  create: CostCreateWithoutUserInput!
}

input CostWhereInput {
  """Logical AND on all given filters."""
  AND: [CostWhereInput!]

  """Logical OR on all given filters."""
  OR: [CostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  category: CostCategoryWhereInput
  user: UserWhereInput
}

input CostWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCostCategory(data: CostCategoryCreateInput!): CostCategory!
  createCost(data: CostCreateInput!): Cost!
  createUser(data: UserCreateInput!): User!
  updateCostCategory(data: CostCategoryUpdateInput!, where: CostCategoryWhereUniqueInput!): CostCategory
  updateCost(data: CostUpdateInput!, where: CostWhereUniqueInput!): Cost
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCostCategory(where: CostCategoryWhereUniqueInput!): CostCategory
  deleteCost(where: CostWhereUniqueInput!): Cost
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCostCategory(where: CostCategoryWhereUniqueInput!, create: CostCategoryCreateInput!, update: CostCategoryUpdateInput!): CostCategory!
  upsertCost(where: CostWhereUniqueInput!, create: CostCreateInput!, update: CostUpdateInput!): Cost!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCostCategories(data: CostCategoryUpdateManyMutationInput!, where: CostCategoryWhereInput): BatchPayload!
  updateManyCosts(data: CostUpdateManyMutationInput!, where: CostWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyCostCategories(where: CostCategoryWhereInput): BatchPayload!
  deleteManyCosts(where: CostWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  costCategories(where: CostCategoryWhereInput, orderBy: CostCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CostCategory]!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  costCategory(where: CostCategoryWhereUniqueInput!): CostCategory
  cost(where: CostWhereUniqueInput!): Cost
  user(where: UserWhereUniqueInput!): User
  costCategoriesConnection(where: CostCategoryWhereInput, orderBy: CostCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostCategoryConnection!
  costsConnection(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  costCategory(where: CostCategorySubscriptionWhereInput): CostCategorySubscriptionPayload
  cost(where: CostSubscriptionWhereInput): CostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  costs(where: CostWhereInput, orderBy: CostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cost!]
  categories(where: CostCategoryWhereInput, orderBy: CostCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CostCategory!]
  monthlyIncome: Float
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  monthlyIncome: Float
  costs: CostCreateManyWithoutUserInput
  categories: CostCategoryCreateManyWithoutUserInput
}

input UserCreateOneWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCostsInput {
  create: UserCreateWithoutCostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCategoriesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  monthlyIncome: Float
  costs: CostCreateManyWithoutUserInput
}

input UserCreateWithoutCostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  monthlyIncome: Float
  categories: CostCategoryCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  monthlyIncome_ASC
  monthlyIncome_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  monthlyIncome: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  monthlyIncome: Float
  costs: CostUpdateManyWithoutUserInput
  categories: CostCategoryUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  monthlyIncome: Float
}

input UserUpdateOneWithoutCategoriesInput {
  create: UserCreateWithoutCategoriesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCategoriesDataInput
  upsert: UserUpsertWithoutCategoriesInput
}

input UserUpdateOneWithoutCostsInput {
  create: UserCreateWithoutCostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCostsDataInput
  upsert: UserUpsertWithoutCostsInput
}

input UserUpdateWithoutCategoriesDataInput {
  name: String
  email: String
  password: String
  monthlyIncome: Float
  costs: CostUpdateManyWithoutUserInput
}

input UserUpdateWithoutCostsDataInput {
  name: String
  email: String
  password: String
  monthlyIncome: Float
  categories: CostCategoryUpdateManyWithoutUserInput
}

input UserUpsertWithoutCategoriesInput {
  update: UserUpdateWithoutCategoriesDataInput!
  create: UserCreateWithoutCategoriesInput!
}

input UserUpsertWithoutCostsInput {
  update: UserUpdateWithoutCostsDataInput!
  create: UserCreateWithoutCostsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  monthlyIncome: Float

  """All values that are not equal to given value."""
  monthlyIncome_not: Float

  """All values that are contained in given list."""
  monthlyIncome_in: [Float!]

  """All values that are not contained in given list."""
  monthlyIncome_not_in: [Float!]

  """All values less than the given value."""
  monthlyIncome_lt: Float

  """All values less than or equal the given value."""
  monthlyIncome_lte: Float

  """All values greater than the given value."""
  monthlyIncome_gt: Float

  """All values greater than or equal the given value."""
  monthlyIncome_gte: Float
  costs_every: CostWhereInput
  costs_some: CostWhereInput
  costs_none: CostWhereInput
  categories_every: CostCategoryWhereInput
  categories_some: CostCategoryWhereInput
  categories_none: CostCategoryWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
