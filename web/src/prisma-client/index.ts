// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cost: (where?: CostWhereInput) => Promise<boolean>;
  financialMonth: (where?: FinancialMonthWhereInput) => Promise<boolean>;
  fixedCostCategory: (where?: FixedCostCategoryWhereInput) => Promise<boolean>;
  flexCostCategory: (where?: FlexCostCategoryWhereInput) => Promise<boolean>;
  monthlyIncome: (where?: MonthlyIncomeWhereInput) => Promise<boolean>;
  rollingCostCategory: (
    where?: RollingCostCategoryWhereInput
  ) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cost: (where: CostWhereUniqueInput) => CostNullablePromise;
  costs: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cost>;
  costsConnection: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CostConnectionPromise;
  financialMonth: (
    where: FinancialMonthWhereUniqueInput
  ) => FinancialMonthNullablePromise;
  financialMonths: (args?: {
    where?: FinancialMonthWhereInput;
    orderBy?: FinancialMonthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FinancialMonth>;
  financialMonthsConnection: (args?: {
    where?: FinancialMonthWhereInput;
    orderBy?: FinancialMonthOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FinancialMonthConnectionPromise;
  fixedCostCategory: (
    where: FixedCostCategoryWhereUniqueInput
  ) => FixedCostCategoryNullablePromise;
  fixedCostCategories: (args?: {
    where?: FixedCostCategoryWhereInput;
    orderBy?: FixedCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FixedCostCategory>;
  fixedCostCategoriesConnection: (args?: {
    where?: FixedCostCategoryWhereInput;
    orderBy?: FixedCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FixedCostCategoryConnectionPromise;
  flexCostCategory: (
    where: FlexCostCategoryWhereUniqueInput
  ) => FlexCostCategoryNullablePromise;
  flexCostCategories: (args?: {
    where?: FlexCostCategoryWhereInput;
    orderBy?: FlexCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<FlexCostCategory>;
  flexCostCategoriesConnection: (args?: {
    where?: FlexCostCategoryWhereInput;
    orderBy?: FlexCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FlexCostCategoryConnectionPromise;
  monthlyIncome: (
    where: MonthlyIncomeWhereUniqueInput
  ) => MonthlyIncomeNullablePromise;
  monthlyIncomes: (args?: {
    where?: MonthlyIncomeWhereInput;
    orderBy?: MonthlyIncomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MonthlyIncome>;
  monthlyIncomesConnection: (args?: {
    where?: MonthlyIncomeWhereInput;
    orderBy?: MonthlyIncomeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MonthlyIncomeConnectionPromise;
  rollingCostCategory: (
    where: RollingCostCategoryWhereUniqueInput
  ) => RollingCostCategoryNullablePromise;
  rollingCostCategories: (args?: {
    where?: RollingCostCategoryWhereInput;
    orderBy?: RollingCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<RollingCostCategory>;
  rollingCostCategoriesConnection: (args?: {
    where?: RollingCostCategoryWhereInput;
    orderBy?: RollingCostCategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RollingCostCategoryConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCost: (data: CostCreateInput) => CostPromise;
  updateCost: (args: {
    data: CostUpdateInput;
    where: CostWhereUniqueInput;
  }) => CostPromise;
  updateManyCosts: (args: {
    data: CostUpdateManyMutationInput;
    where?: CostWhereInput;
  }) => BatchPayloadPromise;
  upsertCost: (args: {
    where: CostWhereUniqueInput;
    create: CostCreateInput;
    update: CostUpdateInput;
  }) => CostPromise;
  deleteCost: (where: CostWhereUniqueInput) => CostPromise;
  deleteManyCosts: (where?: CostWhereInput) => BatchPayloadPromise;
  createFinancialMonth: (
    data: FinancialMonthCreateInput
  ) => FinancialMonthPromise;
  updateFinancialMonth: (args: {
    data: FinancialMonthUpdateInput;
    where: FinancialMonthWhereUniqueInput;
  }) => FinancialMonthPromise;
  updateManyFinancialMonths: (args: {
    data: FinancialMonthUpdateManyMutationInput;
    where?: FinancialMonthWhereInput;
  }) => BatchPayloadPromise;
  upsertFinancialMonth: (args: {
    where: FinancialMonthWhereUniqueInput;
    create: FinancialMonthCreateInput;
    update: FinancialMonthUpdateInput;
  }) => FinancialMonthPromise;
  deleteFinancialMonth: (
    where: FinancialMonthWhereUniqueInput
  ) => FinancialMonthPromise;
  deleteManyFinancialMonths: (
    where?: FinancialMonthWhereInput
  ) => BatchPayloadPromise;
  createFixedCostCategory: (
    data: FixedCostCategoryCreateInput
  ) => FixedCostCategoryPromise;
  updateFixedCostCategory: (args: {
    data: FixedCostCategoryUpdateInput;
    where: FixedCostCategoryWhereUniqueInput;
  }) => FixedCostCategoryPromise;
  updateManyFixedCostCategories: (args: {
    data: FixedCostCategoryUpdateManyMutationInput;
    where?: FixedCostCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertFixedCostCategory: (args: {
    where: FixedCostCategoryWhereUniqueInput;
    create: FixedCostCategoryCreateInput;
    update: FixedCostCategoryUpdateInput;
  }) => FixedCostCategoryPromise;
  deleteFixedCostCategory: (
    where: FixedCostCategoryWhereUniqueInput
  ) => FixedCostCategoryPromise;
  deleteManyFixedCostCategories: (
    where?: FixedCostCategoryWhereInput
  ) => BatchPayloadPromise;
  createFlexCostCategory: (
    data: FlexCostCategoryCreateInput
  ) => FlexCostCategoryPromise;
  updateFlexCostCategory: (args: {
    data: FlexCostCategoryUpdateInput;
    where: FlexCostCategoryWhereUniqueInput;
  }) => FlexCostCategoryPromise;
  updateManyFlexCostCategories: (args: {
    data: FlexCostCategoryUpdateManyMutationInput;
    where?: FlexCostCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertFlexCostCategory: (args: {
    where: FlexCostCategoryWhereUniqueInput;
    create: FlexCostCategoryCreateInput;
    update: FlexCostCategoryUpdateInput;
  }) => FlexCostCategoryPromise;
  deleteFlexCostCategory: (
    where: FlexCostCategoryWhereUniqueInput
  ) => FlexCostCategoryPromise;
  deleteManyFlexCostCategories: (
    where?: FlexCostCategoryWhereInput
  ) => BatchPayloadPromise;
  createMonthlyIncome: (data: MonthlyIncomeCreateInput) => MonthlyIncomePromise;
  updateMonthlyIncome: (args: {
    data: MonthlyIncomeUpdateInput;
    where: MonthlyIncomeWhereUniqueInput;
  }) => MonthlyIncomePromise;
  updateManyMonthlyIncomes: (args: {
    data: MonthlyIncomeUpdateManyMutationInput;
    where?: MonthlyIncomeWhereInput;
  }) => BatchPayloadPromise;
  upsertMonthlyIncome: (args: {
    where: MonthlyIncomeWhereUniqueInput;
    create: MonthlyIncomeCreateInput;
    update: MonthlyIncomeUpdateInput;
  }) => MonthlyIncomePromise;
  deleteMonthlyIncome: (
    where: MonthlyIncomeWhereUniqueInput
  ) => MonthlyIncomePromise;
  deleteManyMonthlyIncomes: (
    where?: MonthlyIncomeWhereInput
  ) => BatchPayloadPromise;
  createRollingCostCategory: (
    data: RollingCostCategoryCreateInput
  ) => RollingCostCategoryPromise;
  updateRollingCostCategory: (args: {
    data: RollingCostCategoryUpdateInput;
    where: RollingCostCategoryWhereUniqueInput;
  }) => RollingCostCategoryPromise;
  updateManyRollingCostCategories: (args: {
    data: RollingCostCategoryUpdateManyMutationInput;
    where?: RollingCostCategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertRollingCostCategory: (args: {
    where: RollingCostCategoryWhereUniqueInput;
    create: RollingCostCategoryCreateInput;
    update: RollingCostCategoryUpdateInput;
  }) => RollingCostCategoryPromise;
  deleteRollingCostCategory: (
    where: RollingCostCategoryWhereUniqueInput
  ) => RollingCostCategoryPromise;
  deleteManyRollingCostCategories: (
    where?: RollingCostCategoryWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cost: (
    where?: CostSubscriptionWhereInput
  ) => CostSubscriptionPayloadSubscription;
  financialMonth: (
    where?: FinancialMonthSubscriptionWhereInput
  ) => FinancialMonthSubscriptionPayloadSubscription;
  fixedCostCategory: (
    where?: FixedCostCategorySubscriptionWhereInput
  ) => FixedCostCategorySubscriptionPayloadSubscription;
  flexCostCategory: (
    where?: FlexCostCategorySubscriptionWhereInput
  ) => FlexCostCategorySubscriptionPayloadSubscription;
  monthlyIncome: (
    where?: MonthlyIncomeSubscriptionWhereInput
  ) => MonthlyIncomeSubscriptionPayloadSubscription;
  rollingCostCategory: (
    where?: RollingCostCategorySubscriptionWhereInput
  ) => RollingCostCategorySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type FinancialMonthOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "month_ASC"
  | "month_DESC"
  | "year_ASC"
  | "year_DESC"
  | "income_ASC"
  | "income_DESC"
  | "totalCost_ASC"
  | "totalCost_DESC"
  | "remainder_ASC"
  | "remainder_DESC"
  | "closed_ASC"
  | "closed_DESC";

export type FixedCostCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type FlexCostCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "limit_ASC"
  | "limit_DESC";

export type MonthlyIncomeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type RollingCostCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "monthlyLimit_ASC"
  | "monthlyLimit_DESC"
  | "totalLimit_ASC"
  | "totalLimit_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  category?: Maybe<FlexCostCategoryWhereInput>;
  AND?: Maybe<CostWhereInput[] | CostWhereInput>;
  OR?: Maybe<CostWhereInput[] | CostWhereInput>;
  NOT?: Maybe<CostWhereInput[] | CostWhereInput>;
}

export interface FlexCostCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  limit?: Maybe<Float>;
  limit_not?: Maybe<Float>;
  limit_in?: Maybe<Float[] | Float>;
  limit_not_in?: Maybe<Float[] | Float>;
  limit_lt?: Maybe<Float>;
  limit_lte?: Maybe<Float>;
  limit_gt?: Maybe<Float>;
  limit_gte?: Maybe<Float>;
  AND?: Maybe<FlexCostCategoryWhereInput[] | FlexCostCategoryWhereInput>;
  OR?: Maybe<FlexCostCategoryWhereInput[] | FlexCostCategoryWhereInput>;
  NOT?: Maybe<FlexCostCategoryWhereInput[] | FlexCostCategoryWhereInput>;
}

export type FinancialMonthWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FinancialMonthWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  month?: Maybe<Int>;
  month_not?: Maybe<Int>;
  month_in?: Maybe<Int[] | Int>;
  month_not_in?: Maybe<Int[] | Int>;
  month_lt?: Maybe<Int>;
  month_lte?: Maybe<Int>;
  month_gt?: Maybe<Int>;
  month_gte?: Maybe<Int>;
  year?: Maybe<Int>;
  year_not?: Maybe<Int>;
  year_in?: Maybe<Int[] | Int>;
  year_not_in?: Maybe<Int[] | Int>;
  year_lt?: Maybe<Int>;
  year_lte?: Maybe<Int>;
  year_gt?: Maybe<Int>;
  year_gte?: Maybe<Int>;
  income?: Maybe<Float>;
  income_not?: Maybe<Float>;
  income_in?: Maybe<Float[] | Float>;
  income_not_in?: Maybe<Float[] | Float>;
  income_lt?: Maybe<Float>;
  income_lte?: Maybe<Float>;
  income_gt?: Maybe<Float>;
  income_gte?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  totalCost_not?: Maybe<Float>;
  totalCost_in?: Maybe<Float[] | Float>;
  totalCost_not_in?: Maybe<Float[] | Float>;
  totalCost_lt?: Maybe<Float>;
  totalCost_lte?: Maybe<Float>;
  totalCost_gt?: Maybe<Float>;
  totalCost_gte?: Maybe<Float>;
  remainder?: Maybe<Float>;
  remainder_not?: Maybe<Float>;
  remainder_in?: Maybe<Float[] | Float>;
  remainder_not_in?: Maybe<Float[] | Float>;
  remainder_lt?: Maybe<Float>;
  remainder_lte?: Maybe<Float>;
  remainder_gt?: Maybe<Float>;
  remainder_gte?: Maybe<Float>;
  closed?: Maybe<Boolean>;
  closed_not?: Maybe<Boolean>;
  AND?: Maybe<FinancialMonthWhereInput[] | FinancialMonthWhereInput>;
  OR?: Maybe<FinancialMonthWhereInput[] | FinancialMonthWhereInput>;
  NOT?: Maybe<FinancialMonthWhereInput[] | FinancialMonthWhereInput>;
}

export type FixedCostCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface FixedCostCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<FixedCostCategoryWhereInput[] | FixedCostCategoryWhereInput>;
  OR?: Maybe<FixedCostCategoryWhereInput[] | FixedCostCategoryWhereInput>;
  NOT?: Maybe<FixedCostCategoryWhereInput[] | FixedCostCategoryWhereInput>;
}

export type FlexCostCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type MonthlyIncomeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MonthlyIncomeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<MonthlyIncomeWhereInput[] | MonthlyIncomeWhereInput>;
  OR?: Maybe<MonthlyIncomeWhereInput[] | MonthlyIncomeWhereInput>;
  NOT?: Maybe<MonthlyIncomeWhereInput[] | MonthlyIncomeWhereInput>;
}

export type RollingCostCategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface RollingCostCategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  monthlyLimit?: Maybe<Float>;
  monthlyLimit_not?: Maybe<Float>;
  monthlyLimit_in?: Maybe<Float[] | Float>;
  monthlyLimit_not_in?: Maybe<Float[] | Float>;
  monthlyLimit_lt?: Maybe<Float>;
  monthlyLimit_lte?: Maybe<Float>;
  monthlyLimit_gt?: Maybe<Float>;
  monthlyLimit_gte?: Maybe<Float>;
  totalLimit?: Maybe<Float>;
  totalLimit_not?: Maybe<Float>;
  totalLimit_in?: Maybe<Float[] | Float>;
  totalLimit_not_in?: Maybe<Float[] | Float>;
  totalLimit_lt?: Maybe<Float>;
  totalLimit_lte?: Maybe<Float>;
  totalLimit_gt?: Maybe<Float>;
  totalLimit_gte?: Maybe<Float>;
  AND?: Maybe<RollingCostCategoryWhereInput[] | RollingCostCategoryWhereInput>;
  OR?: Maybe<RollingCostCategoryWhereInput[] | RollingCostCategoryWhereInput>;
  NOT?: Maybe<RollingCostCategoryWhereInput[] | RollingCostCategoryWhereInput>;
}

export interface CostCreateInput {
  id?: Maybe<ID_Input>;
  amount: Float;
  description: String;
  category: FlexCostCategoryCreateOneInput;
}

export interface FlexCostCategoryCreateOneInput {
  create?: Maybe<FlexCostCategoryCreateInput>;
  connect?: Maybe<FlexCostCategoryWhereUniqueInput>;
}

export interface FlexCostCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  limit: Float;
}

export interface CostUpdateInput {
  amount?: Maybe<Float>;
  description?: Maybe<String>;
  category?: Maybe<FlexCostCategoryUpdateOneRequiredInput>;
}

export interface FlexCostCategoryUpdateOneRequiredInput {
  create?: Maybe<FlexCostCategoryCreateInput>;
  update?: Maybe<FlexCostCategoryUpdateDataInput>;
  upsert?: Maybe<FlexCostCategoryUpsertNestedInput>;
  connect?: Maybe<FlexCostCategoryWhereUniqueInput>;
}

export interface FlexCostCategoryUpdateDataInput {
  name?: Maybe<String>;
  limit?: Maybe<Float>;
}

export interface FlexCostCategoryUpsertNestedInput {
  update: FlexCostCategoryUpdateDataInput;
  create: FlexCostCategoryCreateInput;
}

export interface CostUpdateManyMutationInput {
  amount?: Maybe<Float>;
  description?: Maybe<String>;
}

export interface FinancialMonthCreateInput {
  id?: Maybe<ID_Input>;
  month: Int;
  year: Int;
  income: Float;
  totalCost: Float;
  remainder: Float;
  closed?: Maybe<Boolean>;
}

export interface FinancialMonthUpdateInput {
  month?: Maybe<Int>;
  year?: Maybe<Int>;
  income?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  remainder?: Maybe<Float>;
  closed?: Maybe<Boolean>;
}

export interface FinancialMonthUpdateManyMutationInput {
  month?: Maybe<Int>;
  year?: Maybe<Int>;
  income?: Maybe<Float>;
  totalCost?: Maybe<Float>;
  remainder?: Maybe<Float>;
  closed?: Maybe<Boolean>;
}

export interface FixedCostCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  amount: Float;
}

export interface FixedCostCategoryUpdateInput {
  name?: Maybe<String>;
  amount?: Maybe<Float>;
}

export interface FixedCostCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  amount?: Maybe<Float>;
}

export interface FlexCostCategoryUpdateInput {
  name?: Maybe<String>;
  limit?: Maybe<Float>;
}

export interface FlexCostCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  limit?: Maybe<Float>;
}

export interface MonthlyIncomeCreateInput {
  id?: Maybe<ID_Input>;
  amount: Float;
}

export interface MonthlyIncomeUpdateInput {
  amount?: Maybe<Float>;
}

export interface MonthlyIncomeUpdateManyMutationInput {
  amount?: Maybe<Float>;
}

export interface RollingCostCategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  monthlyLimit: Float;
  totalLimit: Float;
}

export interface RollingCostCategoryUpdateInput {
  name?: Maybe<String>;
  monthlyLimit?: Maybe<Float>;
  totalLimit?: Maybe<Float>;
}

export interface RollingCostCategoryUpdateManyMutationInput {
  name?: Maybe<String>;
  monthlyLimit?: Maybe<Float>;
  totalLimit?: Maybe<Float>;
}

export interface CostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CostWhereInput>;
  AND?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  OR?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  NOT?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
}

export interface FinancialMonthSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FinancialMonthWhereInput>;
  AND?: Maybe<
    | FinancialMonthSubscriptionWhereInput[]
    | FinancialMonthSubscriptionWhereInput
  >;
  OR?: Maybe<
    | FinancialMonthSubscriptionWhereInput[]
    | FinancialMonthSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FinancialMonthSubscriptionWhereInput[]
    | FinancialMonthSubscriptionWhereInput
  >;
}

export interface FixedCostCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FixedCostCategoryWhereInput>;
  AND?: Maybe<
    | FixedCostCategorySubscriptionWhereInput[]
    | FixedCostCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    | FixedCostCategorySubscriptionWhereInput[]
    | FixedCostCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FixedCostCategorySubscriptionWhereInput[]
    | FixedCostCategorySubscriptionWhereInput
  >;
}

export interface FlexCostCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FlexCostCategoryWhereInput>;
  AND?: Maybe<
    | FlexCostCategorySubscriptionWhereInput[]
    | FlexCostCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    | FlexCostCategorySubscriptionWhereInput[]
    | FlexCostCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | FlexCostCategorySubscriptionWhereInput[]
    | FlexCostCategorySubscriptionWhereInput
  >;
}

export interface MonthlyIncomeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MonthlyIncomeWhereInput>;
  AND?: Maybe<
    MonthlyIncomeSubscriptionWhereInput[] | MonthlyIncomeSubscriptionWhereInput
  >;
  OR?: Maybe<
    MonthlyIncomeSubscriptionWhereInput[] | MonthlyIncomeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MonthlyIncomeSubscriptionWhereInput[] | MonthlyIncomeSubscriptionWhereInput
  >;
}

export interface RollingCostCategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RollingCostCategoryWhereInput>;
  AND?: Maybe<
    | RollingCostCategorySubscriptionWhereInput[]
    | RollingCostCategorySubscriptionWhereInput
  >;
  OR?: Maybe<
    | RollingCostCategorySubscriptionWhereInput[]
    | RollingCostCategorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    | RollingCostCategorySubscriptionWhereInput[]
    | RollingCostCategorySubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cost {
  id: ID_Output;
  amount: Float;
  description: String;
  createdAt: DateTimeOutput;
}

export interface CostPromise extends Promise<Cost>, Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  category: <T = FlexCostCategoryPromise>() => T;
}

export interface CostSubscription
  extends Promise<AsyncIterator<Cost>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  category: <T = FlexCostCategorySubscription>() => T;
}

export interface CostNullablePromise
  extends Promise<Cost | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  category: <T = FlexCostCategoryPromise>() => T;
}

export interface FlexCostCategory {
  id: ID_Output;
  name: String;
  limit: Float;
}

export interface FlexCostCategoryPromise
  extends Promise<FlexCostCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  limit: () => Promise<Float>;
}

export interface FlexCostCategorySubscription
  extends Promise<AsyncIterator<FlexCostCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  limit: () => Promise<AsyncIterator<Float>>;
}

export interface FlexCostCategoryNullablePromise
  extends Promise<FlexCostCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  limit: () => Promise<Float>;
}

export interface CostConnection {
  pageInfo: PageInfo;
  edges: CostEdge[];
}

export interface CostConnectionPromise
  extends Promise<CostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CostEdge>>() => T;
  aggregate: <T = AggregateCostPromise>() => T;
}

export interface CostConnectionSubscription
  extends Promise<AsyncIterator<CostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCostSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CostEdge {
  node: Cost;
  cursor: String;
}

export interface CostEdgePromise extends Promise<CostEdge>, Fragmentable {
  node: <T = CostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CostEdgeSubscription
  extends Promise<AsyncIterator<CostEdge>>,
    Fragmentable {
  node: <T = CostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCost {
  count: Int;
}

export interface AggregateCostPromise
  extends Promise<AggregateCost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCostSubscription
  extends Promise<AsyncIterator<AggregateCost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FinancialMonth {
  id: ID_Output;
  month: Int;
  year: Int;
  income: Float;
  totalCost: Float;
  remainder: Float;
  closed: Boolean;
}

export interface FinancialMonthPromise
  extends Promise<FinancialMonth>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
  income: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  remainder: () => Promise<Float>;
  closed: () => Promise<Boolean>;
}

export interface FinancialMonthSubscription
  extends Promise<AsyncIterator<FinancialMonth>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Float>>;
  totalCost: () => Promise<AsyncIterator<Float>>;
  remainder: () => Promise<AsyncIterator<Float>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
}

export interface FinancialMonthNullablePromise
  extends Promise<FinancialMonth | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
  income: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  remainder: () => Promise<Float>;
  closed: () => Promise<Boolean>;
}

export interface FinancialMonthConnection {
  pageInfo: PageInfo;
  edges: FinancialMonthEdge[];
}

export interface FinancialMonthConnectionPromise
  extends Promise<FinancialMonthConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FinancialMonthEdge>>() => T;
  aggregate: <T = AggregateFinancialMonthPromise>() => T;
}

export interface FinancialMonthConnectionSubscription
  extends Promise<AsyncIterator<FinancialMonthConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FinancialMonthEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFinancialMonthSubscription>() => T;
}

export interface FinancialMonthEdge {
  node: FinancialMonth;
  cursor: String;
}

export interface FinancialMonthEdgePromise
  extends Promise<FinancialMonthEdge>,
    Fragmentable {
  node: <T = FinancialMonthPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FinancialMonthEdgeSubscription
  extends Promise<AsyncIterator<FinancialMonthEdge>>,
    Fragmentable {
  node: <T = FinancialMonthSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFinancialMonth {
  count: Int;
}

export interface AggregateFinancialMonthPromise
  extends Promise<AggregateFinancialMonth>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFinancialMonthSubscription
  extends Promise<AsyncIterator<AggregateFinancialMonth>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FixedCostCategory {
  id: ID_Output;
  name: String;
  amount: Float;
}

export interface FixedCostCategoryPromise
  extends Promise<FixedCostCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Float>;
}

export interface FixedCostCategorySubscription
  extends Promise<AsyncIterator<FixedCostCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface FixedCostCategoryNullablePromise
  extends Promise<FixedCostCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Float>;
}

export interface FixedCostCategoryConnection {
  pageInfo: PageInfo;
  edges: FixedCostCategoryEdge[];
}

export interface FixedCostCategoryConnectionPromise
  extends Promise<FixedCostCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FixedCostCategoryEdge>>() => T;
  aggregate: <T = AggregateFixedCostCategoryPromise>() => T;
}

export interface FixedCostCategoryConnectionSubscription
  extends Promise<AsyncIterator<FixedCostCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FixedCostCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFixedCostCategorySubscription>() => T;
}

export interface FixedCostCategoryEdge {
  node: FixedCostCategory;
  cursor: String;
}

export interface FixedCostCategoryEdgePromise
  extends Promise<FixedCostCategoryEdge>,
    Fragmentable {
  node: <T = FixedCostCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FixedCostCategoryEdgeSubscription
  extends Promise<AsyncIterator<FixedCostCategoryEdge>>,
    Fragmentable {
  node: <T = FixedCostCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFixedCostCategory {
  count: Int;
}

export interface AggregateFixedCostCategoryPromise
  extends Promise<AggregateFixedCostCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFixedCostCategorySubscription
  extends Promise<AsyncIterator<AggregateFixedCostCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FlexCostCategoryConnection {
  pageInfo: PageInfo;
  edges: FlexCostCategoryEdge[];
}

export interface FlexCostCategoryConnectionPromise
  extends Promise<FlexCostCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FlexCostCategoryEdge>>() => T;
  aggregate: <T = AggregateFlexCostCategoryPromise>() => T;
}

export interface FlexCostCategoryConnectionSubscription
  extends Promise<AsyncIterator<FlexCostCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FlexCostCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFlexCostCategorySubscription>() => T;
}

export interface FlexCostCategoryEdge {
  node: FlexCostCategory;
  cursor: String;
}

export interface FlexCostCategoryEdgePromise
  extends Promise<FlexCostCategoryEdge>,
    Fragmentable {
  node: <T = FlexCostCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FlexCostCategoryEdgeSubscription
  extends Promise<AsyncIterator<FlexCostCategoryEdge>>,
    Fragmentable {
  node: <T = FlexCostCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFlexCostCategory {
  count: Int;
}

export interface AggregateFlexCostCategoryPromise
  extends Promise<AggregateFlexCostCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFlexCostCategorySubscription
  extends Promise<AsyncIterator<AggregateFlexCostCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MonthlyIncome {
  id: ID_Output;
  amount: Float;
}

export interface MonthlyIncomePromise
  extends Promise<MonthlyIncome>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
}

export interface MonthlyIncomeSubscription
  extends Promise<AsyncIterator<MonthlyIncome>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface MonthlyIncomeNullablePromise
  extends Promise<MonthlyIncome | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
}

export interface MonthlyIncomeConnection {
  pageInfo: PageInfo;
  edges: MonthlyIncomeEdge[];
}

export interface MonthlyIncomeConnectionPromise
  extends Promise<MonthlyIncomeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MonthlyIncomeEdge>>() => T;
  aggregate: <T = AggregateMonthlyIncomePromise>() => T;
}

export interface MonthlyIncomeConnectionSubscription
  extends Promise<AsyncIterator<MonthlyIncomeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MonthlyIncomeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMonthlyIncomeSubscription>() => T;
}

export interface MonthlyIncomeEdge {
  node: MonthlyIncome;
  cursor: String;
}

export interface MonthlyIncomeEdgePromise
  extends Promise<MonthlyIncomeEdge>,
    Fragmentable {
  node: <T = MonthlyIncomePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MonthlyIncomeEdgeSubscription
  extends Promise<AsyncIterator<MonthlyIncomeEdge>>,
    Fragmentable {
  node: <T = MonthlyIncomeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMonthlyIncome {
  count: Int;
}

export interface AggregateMonthlyIncomePromise
  extends Promise<AggregateMonthlyIncome>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMonthlyIncomeSubscription
  extends Promise<AsyncIterator<AggregateMonthlyIncome>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RollingCostCategory {
  id: ID_Output;
  name: String;
  monthlyLimit: Float;
  totalLimit: Float;
}

export interface RollingCostCategoryPromise
  extends Promise<RollingCostCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  monthlyLimit: () => Promise<Float>;
  totalLimit: () => Promise<Float>;
}

export interface RollingCostCategorySubscription
  extends Promise<AsyncIterator<RollingCostCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  monthlyLimit: () => Promise<AsyncIterator<Float>>;
  totalLimit: () => Promise<AsyncIterator<Float>>;
}

export interface RollingCostCategoryNullablePromise
  extends Promise<RollingCostCategory | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  monthlyLimit: () => Promise<Float>;
  totalLimit: () => Promise<Float>;
}

export interface RollingCostCategoryConnection {
  pageInfo: PageInfo;
  edges: RollingCostCategoryEdge[];
}

export interface RollingCostCategoryConnectionPromise
  extends Promise<RollingCostCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RollingCostCategoryEdge>>() => T;
  aggregate: <T = AggregateRollingCostCategoryPromise>() => T;
}

export interface RollingCostCategoryConnectionSubscription
  extends Promise<AsyncIterator<RollingCostCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<RollingCostCategoryEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateRollingCostCategorySubscription>() => T;
}

export interface RollingCostCategoryEdge {
  node: RollingCostCategory;
  cursor: String;
}

export interface RollingCostCategoryEdgePromise
  extends Promise<RollingCostCategoryEdge>,
    Fragmentable {
  node: <T = RollingCostCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RollingCostCategoryEdgeSubscription
  extends Promise<AsyncIterator<RollingCostCategoryEdge>>,
    Fragmentable {
  node: <T = RollingCostCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRollingCostCategory {
  count: Int;
}

export interface AggregateRollingCostCategoryPromise
  extends Promise<AggregateRollingCostCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRollingCostCategorySubscription
  extends Promise<AsyncIterator<AggregateRollingCostCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CostSubscriptionPayload {
  mutation: MutationType;
  node: Cost;
  updatedFields: String[];
  previousValues: CostPreviousValues;
}

export interface CostSubscriptionPayloadPromise
  extends Promise<CostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CostPreviousValuesPromise>() => T;
}

export interface CostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CostPreviousValuesSubscription>() => T;
}

export interface CostPreviousValues {
  id: ID_Output;
  amount: Float;
  description: String;
  createdAt: DateTimeOutput;
}

export interface CostPreviousValuesPromise
  extends Promise<CostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CostPreviousValuesSubscription
  extends Promise<AsyncIterator<CostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FinancialMonthSubscriptionPayload {
  mutation: MutationType;
  node: FinancialMonth;
  updatedFields: String[];
  previousValues: FinancialMonthPreviousValues;
}

export interface FinancialMonthSubscriptionPayloadPromise
  extends Promise<FinancialMonthSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FinancialMonthPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FinancialMonthPreviousValuesPromise>() => T;
}

export interface FinancialMonthSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FinancialMonthSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FinancialMonthSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FinancialMonthPreviousValuesSubscription>() => T;
}

export interface FinancialMonthPreviousValues {
  id: ID_Output;
  month: Int;
  year: Int;
  income: Float;
  totalCost: Float;
  remainder: Float;
  closed: Boolean;
}

export interface FinancialMonthPreviousValuesPromise
  extends Promise<FinancialMonthPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
  income: () => Promise<Float>;
  totalCost: () => Promise<Float>;
  remainder: () => Promise<Float>;
  closed: () => Promise<Boolean>;
}

export interface FinancialMonthPreviousValuesSubscription
  extends Promise<AsyncIterator<FinancialMonthPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
  income: () => Promise<AsyncIterator<Float>>;
  totalCost: () => Promise<AsyncIterator<Float>>;
  remainder: () => Promise<AsyncIterator<Float>>;
  closed: () => Promise<AsyncIterator<Boolean>>;
}

export interface FixedCostCategorySubscriptionPayload {
  mutation: MutationType;
  node: FixedCostCategory;
  updatedFields: String[];
  previousValues: FixedCostCategoryPreviousValues;
}

export interface FixedCostCategorySubscriptionPayloadPromise
  extends Promise<FixedCostCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FixedCostCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FixedCostCategoryPreviousValuesPromise>() => T;
}

export interface FixedCostCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FixedCostCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FixedCostCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FixedCostCategoryPreviousValuesSubscription>() => T;
}

export interface FixedCostCategoryPreviousValues {
  id: ID_Output;
  name: String;
  amount: Float;
}

export interface FixedCostCategoryPreviousValuesPromise
  extends Promise<FixedCostCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Float>;
}

export interface FixedCostCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<FixedCostCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface FlexCostCategorySubscriptionPayload {
  mutation: MutationType;
  node: FlexCostCategory;
  updatedFields: String[];
  previousValues: FlexCostCategoryPreviousValues;
}

export interface FlexCostCategorySubscriptionPayloadPromise
  extends Promise<FlexCostCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FlexCostCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FlexCostCategoryPreviousValuesPromise>() => T;
}

export interface FlexCostCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FlexCostCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FlexCostCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FlexCostCategoryPreviousValuesSubscription>() => T;
}

export interface FlexCostCategoryPreviousValues {
  id: ID_Output;
  name: String;
  limit: Float;
}

export interface FlexCostCategoryPreviousValuesPromise
  extends Promise<FlexCostCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  limit: () => Promise<Float>;
}

export interface FlexCostCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<FlexCostCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  limit: () => Promise<AsyncIterator<Float>>;
}

export interface MonthlyIncomeSubscriptionPayload {
  mutation: MutationType;
  node: MonthlyIncome;
  updatedFields: String[];
  previousValues: MonthlyIncomePreviousValues;
}

export interface MonthlyIncomeSubscriptionPayloadPromise
  extends Promise<MonthlyIncomeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MonthlyIncomePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MonthlyIncomePreviousValuesPromise>() => T;
}

export interface MonthlyIncomeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MonthlyIncomeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MonthlyIncomeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MonthlyIncomePreviousValuesSubscription>() => T;
}

export interface MonthlyIncomePreviousValues {
  id: ID_Output;
  amount: Float;
}

export interface MonthlyIncomePreviousValuesPromise
  extends Promise<MonthlyIncomePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
}

export interface MonthlyIncomePreviousValuesSubscription
  extends Promise<AsyncIterator<MonthlyIncomePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface RollingCostCategorySubscriptionPayload {
  mutation: MutationType;
  node: RollingCostCategory;
  updatedFields: String[];
  previousValues: RollingCostCategoryPreviousValues;
}

export interface RollingCostCategorySubscriptionPayloadPromise
  extends Promise<RollingCostCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RollingCostCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RollingCostCategoryPreviousValuesPromise>() => T;
}

export interface RollingCostCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RollingCostCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RollingCostCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RollingCostCategoryPreviousValuesSubscription>() => T;
}

export interface RollingCostCategoryPreviousValues {
  id: ID_Output;
  name: String;
  monthlyLimit: Float;
  totalLimit: Float;
}

export interface RollingCostCategoryPreviousValuesPromise
  extends Promise<RollingCostCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  monthlyLimit: () => Promise<Float>;
  totalLimit: () => Promise<Float>;
}

export interface RollingCostCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<RollingCostCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  monthlyLimit: () => Promise<AsyncIterator<Float>>;
  totalLimit: () => Promise<AsyncIterator<Float>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "FixedCostCategory",
    embedded: false
  },
  {
    name: "FlexCostCategory",
    embedded: false
  },
  {
    name: "RollingCostCategory",
    embedded: false
  },
  {
    name: "MonthlyIncome",
    embedded: false
  },
  {
    name: "Cost",
    embedded: false
  },
  {
    name: "FinancialMonth",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
